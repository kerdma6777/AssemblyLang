import java.util.ArrayList;
import java.util.*;

public class AssemblyLang {
    int ACC;
    boolean change=false;
    ArrayList<String> code = new ArrayList<String>();
    ArrayList<String> markers = new ArrayList<String>();
    ArrayList<Integer> markerIndex = new ArrayList<Integer>();
    ArrayList<String> variables = new ArrayList<String>();
    ArrayList<Integer> variableValue = new ArrayList<Integer>();
    ArrayList<Integer> variableIndex = new ArrayList<Integer>();

    /*
     *constructor 
     *@param ArrayList input is an arrayList of strings each representing a line of assembly code
     */
    public AssemblyLang(ArrayList<String> input) {
        for (int i = 0; i < input.size(); i++) {
            code.add(input.get(i));
        }
    }
    
    /*
     *Adds a number to the value of the ACC
     *@param num is an integer representing the number being added to the ACC
     */
    private void ADD(int num)
    {
        ACC = ACC + num;
   
    }
    
    /*
     *Subtracts a number from the value of the ACC
     *@param num is an integer representing the number being subtracted from the ACC
     */
    private void SUB(int num) {
        ACC = ACC - num;
    }
    
     /*
     *Multiplies a number by the value of the ACC
     *@param num is an integer representing the number being multiplied by the ACC
     */
    private void MULT(int num) {
        ACC = ACC * num;
    }
    
    /*
     *Dives the value of the ACC by a number 
     *@param num is an integer representing the denominator
     */
    private void DIV(int num) {
        ACC = ACC / num;
    }
    
    /*
     *returns a string representing a specific line in the original assembly code
     *@param num is an integer representing the index of the line of code
     *@return the line of code at that specific index
     */
    private String getLine(int l) {
        return code.get(l);
    }
    
    /*
     *Finds the index (line number) of markers and DC in the original assembly code
     */
    private void FindMarkersandDC() {
        int numSpaces;
        String mark;
        for (int i = 0; i < code.size(); i++)
        {
            String a = code.get(i);//line of assembly code
            if (a.indexOf ("END")>=0) //specific case needed for the line "END" - if there is 1 space a marker is present
            {
                if (a.indexOf (" ")>=0) //there is a marker
                {
                    mark=a.substring (0, a.indexOf(" "));
                    markers.add(mark);
                    markerIndex.add(new Integer(i));
                }
            }
            else if (a.indexOf(" ") >= 0) //there is at least one space a!="END"
            {
                mark = a.substring(0, (a.indexOf(" "))); 
                a = a.substring(a.indexOf(" ") + 1);
                if (a.indexOf(" ") >= 0)// there are two spaces, so there must be a marker or DC
                {
                    if (a.indexOf("DC") < 0)
                    {
                        markers.add(mark);
                        markerIndex.add(new Integer(i));
                    }
                    else //DC is on this line
                    {
                        variables.add(mark);
                        mark = a.substring(a.indexOf(" ") + 1);
                        variableValue.add(new Integer(mark));
                        variableIndex.add(new Integer(i));
                    }
                }
            }
        }
    }
    
    /*
     *calls specific functions to execute each line
     *@param line is an integer representing the index of a line of code
     */
    private void ExecuteLine(int line)
    {
    	change=false;
        String in = getLine(line);
        if (in.indexOf("READ") >= 0) //read in value from user
        {
            Scanner scan = new Scanner(System.in);
            int num = scan.nextInt();// value of variable
            in = in.substring((in.indexOf(" ")) + 1);// variable
            variables.add(in);
            variableValue.add(new Integer(num));
            variableIndex.add(new Integer(line));
            ExecuteLine(line + 1); //execute next line
        }
        else if (in.indexOf("DC") >= 0)
        {
            // do nothing. This action is already taken care of by the
            // FindMarkersandDC method
            ExecuteLine(line + 1);
        }
        else if (in.indexOf("LOAD") >= 0)
        {
            if (in.indexOf("=") > 0) { //Load number into ACC
                in = in.substring(in.indexOf("=") + 1);
                ACC = Integer.valueOf(in);
            } else { //Load variable into ACC
                in = OneSpace(in);
                in = in.substring(in.indexOf(" ") + 1);
                ACC = findValue(in);
            }
            ExecuteLine(line + 1);
        }
        else if (in.indexOf("STORE") >= 0)
        {
            in = OneSpace(in);
            String loc = in.substring(in.indexOf(" ") + 1); //variable that will store value of ACC
            for (int i = 0; i < variables.size(); i++) 
            {
                if ((variables.get(i)).equalsIgnoreCase(loc)) 
                {
                    variableValue.set(i, new Integer(ACC));
                    change=true;
                }
            }
            if (!change) //The variable isn't yet created
            {
            	variables.add(loc);
            	variableValue.add(new Integer (ACC));
            }
            ExecuteLine(line + 1);
        }
        else if (in.indexOf("PRINT") >= 0)
        {
            in = OneSpace(in);
            if (in.indexOf("=") >= 0)// number
            {
                in = in.substring(in.indexOf("=") + 1);
                System.out.println (in);
            } else// variable
            {
                in = in.substring(in.indexOf(" ") + 1);
                System.out.println(findValue(in));
            }
            ExecuteLine(line + 1);
        }
        else if (in.indexOf("ADD") >= 0)
        {
            in = OneSpace(in);
            if (in.indexOf("=") >= 0)// number
            {
                in = in.substring(in.indexOf("=") + 1);
                ADD(Integer.valueOf(in));
            }
            else// variable
            {
                in = in.substring(in.indexOf(" ") + 1);
                ADD(findValue (in));
            }
            ExecuteLine(line + 1);
        }
        else if (in.indexOf("SUB") >= 0)
        {
            in = OneSpace(in);
            if (in.indexOf("=") >= 0)// number
            {
                in = in.substring(in.indexOf("=") + 1);
                SUB(Integer.valueOf(in));
            } else// variable
            {
                in = in.substring(in.indexOf(" ") + 1);
                SUB(findValue (in));
            }
            ExecuteLine(line + 1);
        }
        else if (in.indexOf("MULT") >= 0)
        {
            in = OneSpace(in);
            if (in.indexOf("=") >= 0)// number
            {
                in = in.substring(in.indexOf("=") + 1);
                MULT(Integer.valueOf(in));
            } else// variable
            {
                in = in.substring(in.indexOf(" ") + 1);
                MULT(findValue (in));
            }
            ExecuteLine(line + 1);
        }
        else if (in.indexOf("DIV") >= 0)
        {
            in = OneSpace(in);
            if (in.indexOf("=") >= 0)// number
            {
                in = in.substring(in.indexOf("=") + 1);
                DIV(Integer.valueOf(in));
            } else// variable
            {
                in = in.substring(in.indexOf(" ") + 1);
                DIV(findValue (in));
            }
            ExecuteLine(line + 1);
        }
        else if (in.indexOf("BE") >= 0)
        {
            if (ACC == 0)// branch requirements are met
            {
                in = OneSpace(in);
                String loc = in.substring(in.indexOf(" ") + 1);// marker
                ExecuteLine(findMarkerIndex(loc));
            }
            else //branch requirements are NOT met
            {
            	ExecuteLine (line+1);
            }
        }
        else if (in.indexOf("BG") >= 0)
        {
            if (ACC > 0)// branch requirements are met
            {
                in = OneSpace(in);
                String loc = in.substring(in.indexOf(" ") + 1);// marker
                ExecuteLine(findMarkerIndex(loc));
            }
            else //branch requirements are NOT met
            {
            	ExecuteLine (line+1);
            }
        }
        else if (in.indexOf("BL") >= 0)
        {
            if (ACC < 0)// branch requirements are met
            {
                in = OneSpace(in);
                String loc = in.substring(in.indexOf(" ") + 1);// marker
                ExecuteLine(findMarkerIndex(loc));
            }
            else //branch requirements are NOT met
            {
            	ExecuteLine (line+1);
            }
        }
        else if (in.indexOf("BU") >= 0)
        {
            in = OneSpace(in);
            String loc = in.substring(in.indexOf(" ") + 1);// marker
            ExecuteLine(findMarkerIndex(loc));
        }
        else// the line includes END
        {
            // doesn't call the ExecuteLine method again. Program terminates
        }
    }
    
     /*
     *How to execute the assembly code; called on an AssemblyLang object
     */
    public void run() {
        FindMarkersandDC();
        ExecuteLine(0);
    }
    
     /*
     *calcualte the integer value of a variable
     *@param var is a String representing a variable
     *@return integer value of variable
     */
    private int findValue(String var)
    {
        for (int i = 0; i < variables.size(); i++) {
            if (var.equalsIgnoreCase(variables.get(i))) {
                return variableValue.get(i);
            }
        }
        return Math.pow (2, 31).intValue ();// variable name is not found
    }
    
    /*
     *finds the index of a marker
     *@param marker is a String representing a marker
     *@return index of the marker
     */
    private int findMarkerIndex(String marker)
    {
        for (int i = 0; i < markers.size(); i++) {
            if (markers.get(i).equalsIgnoreCase(marker)) {
                return markerIndex.get(i);
            }
        }
        return -1;// marker not found
    }

    /*
     *creates a string with only one space and removes any marker if present
     *@param in is a line of code
     *@return string with only one space
     */
    private String OneSpace(String in)
    {
        String one = in.substring(in.indexOf(" ") + 1);
        if (one.indexOf(" ") < 0)// no marker is present
        {
            return in;
        } else {
            return one;
        }
    }

}
